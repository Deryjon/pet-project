// store/cart.ts
import { defineStore } from "pinia";
import { ref, computed } from "vue";

export const useCartStore = defineStore("cart", () => {
  const cart = ref<any[]>([]);

  const products = ref([
    {
      id: 1,
      name: "–ß–µ—Ö–æ–ª –¥–ª—è iPhone 12",
      price: 50000,
      barcode: "123456789",
      article: "123456789",
    },
    {
      id: 2,
      name: "–°—Ç–µ–∫–ª–æ –¥–ª—è Samsung S22",
      price: 80000,
      barcode: "987654321",
      article: "S22-GLASS",
    },
    {
      id: 3,
      name: "–ó–∞—Ä—è–¥–∫–∞ Type-C",
      price: 120000,
      barcode: "456123789",
      article: "TYPEC-CHARGER",
    },
    {
      id: 4,
      name: "–ù–∞—É—à–Ω–∏–∫–∏ AirPods",
      price: 1500000,
      barcode: "741852963",
      article: "AIRPODS",
    },
  ]);

  const searchQuery = ref("");

  // üëâ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ (–¥–ª—è –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã)
  const discountValue = ref(0); // —á–∏—Å–ª–æ (–ª–∏–±–æ % –ª–∏–±–æ UZS)
  const discountType = ref<"%" | "uzs">("%"); // —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å–∫–∏–¥–∫–∏

  const filteredProducts = computed(() => {
    const q = searchQuery.value.toLowerCase();
    return products.value.filter(
      (p) =>
        p.name.toLowerCase().includes(q) ||
        p.article.toLowerCase().includes(q) ||
        p.barcode.toLowerCase().includes(q)
    );
  });
  

  function addToCart(product: any) {
    const existing = cart.value.find((c) => c.id === product.id);
    if (existing) {
      existing.quantity += 1;
    } else {
      cart.value.push({
        ...product,
        quantity: 1,
        discountValue: 0, // –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
        discountType: "%", // —Ç–∏–ø —Å–∫–∏–¥–∫–∏
      });
    }
    searchQuery.value = "";
  }

  function removeFromCart(id: number) {
    cart.value = cart.value.filter((c) => c.id !== id);
  }

  function clearCart() {
    cart.value = [];
  }

  /** üëâ –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ */
  function updateDiscount(id: number, value: number, type: "%" | "uzs") {
    const product = cart.value.find((c) => c.id === id);
    if (product) {
      product.discountValue = value;
      product.discountType = type;
    }
  }

  /** –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å —É—á—ë—Ç–æ–º –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏ */
  function itemFinalPrice(item: any) {
    const dv = Number(item.discountValue || 0);
    const dt = item.discountType || "%";
    if (dt === "%") {
      return Math.max(0, item.price - (item.price * dv) / 100);
    } else {
      return Math.max(0, item.price - dv);
    }
  }

  // –ü–æ–¥—ã—Ç–æ–≥ (–±–µ–∑ —Å–∫–∏–¥–æ–∫)
  const subtotal = computed(() =>
    cart.value.reduce((sum, item) => sum + item.price * item.quantity, 0)
  );

  // –°—É–º–º–∞ —Å–∫–∏–¥–æ–∫ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
  const itemDiscounts = computed(() =>
    cart.value.reduce(
      (sum, item) => sum + (item.price - itemFinalPrice(item)) * item.quantity,
      0
    )
  );

  // üëâ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ (–ø–æ–≤–µ—Ä—Ö —Ç–æ–≤–∞—Ä–Ω—ã—Ö)
  function globalDiscountAmount() {
    const base = subtotal.value - itemDiscounts.value; // –±–∞–∑–∞ –ø–æ—Å–ª–µ —Ç–æ–≤–∞—Ä–Ω—ã—Ö —Å–∫–∏–¥–æ–∫
    if (discountType.value === "%") {
      return Math.max(0, (base * discountValue.value) / 100);
    } else {
      return Math.min(base, discountValue.value); // –Ω–µ –±–æ–ª—å—à–µ —á–µ–º —Å–∞–º–∞ –±–∞–∑–∞
    }
  }

  // –ò—Ç–æ–≥ –∫ –æ–ø–ª–∞—Ç–µ
  const total = computed(() => {
    const afterItemDiscounts = subtotal.value - itemDiscounts.value;
    const global = globalDiscountAmount();
    return Math.max(0, afterItemDiscounts - global);
  });

  // –û–±—â–∞—è —Å—É–º–º–∞ —Å–∫–∏–¥–æ–∫ (—Ç–æ–≤–∞—Ä–Ω—ã–µ + –≥–ª–æ–±–∞–ª—å–Ω–∞—è)
  const totalDiscount = computed(
    () => itemDiscounts.value + globalDiscountAmount()
  );

  /** –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —Å —É—á—ë—Ç–æ–º –∏ —Ç–æ–≤–∞—Ä–Ω–æ–π —Å–∫–∏–¥–∫–∏, –∏ –æ–±—â–µ–π */
function itemFinalPriceWithGlobal(item: any) {
  // –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏
  let price = itemFinalPrice(item);

  // –ü–æ—Ç–æ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é
  const baseSubtotal = subtotal.value - itemDiscounts.value; // –±–∞–∑–∞ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–∏
  if (baseSubtotal <= 0) return price;

  let factor = 1;
  if (discountType.value === "%") {
    factor = 1 - discountValue.value / 100;
  } else {
    // —Å—É–º–º–∞ –¥–µ–ª–∏—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    factor = (baseSubtotal - globalDiscountAmount()) / baseSubtotal;
  }

  return Math.max(0, price * factor);
}

  return {
    cart,
    products,
    searchQuery,
    filteredProducts,
    totalDiscount,
    addToCart,
    removeFromCart,
    updateDiscount,
    itemFinalPrice,
    itemFinalPriceWithGlobal,
    clearCart,
    subtotal,
    itemDiscounts,
    total,
    discountValue,
    discountType,
    globalDiscountAmount,
  };
});
